xquery version "3.0";

module namespace app="http://exist-db.org/apps/snapsec/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/apps/snapsec/config" at "config.xqm";
import module namespace wrap="http://kirmit:2020/exist/apps/snap/sparqlwrapper" at "wrap.xqm"; 

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated). 
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the class attribute <code>class="app:test"</code>.</p>
};

declare function app:if-attribute-set($node as node(), $model as map(*), $attribute as xs:string) {
    let $isSet :=
        (exists($attribute) and request:get-attribute($attribute))
    return
        if ($isSet) then
            templates:process($node/node(), $model)
        else
            ()
};

declare function app:if-attribute-unset($node as node(), $model as map(*), $attribute as xs:string) {
    let $isSet :=
        (exists($attribute) and request:get-attribute($attribute))
    return
        if (not($isSet)) then
            templates:process($node/node(), $model)
        else
            ()
};

declare function app:username($node as node(), $model as map(*)) {
    let $user:= request:get-attribute("org.exist-db.snapsec.user")
    let $name := if ($user) then sm:get-account-metadata($user, xs:anyURI('http://axschema.org/namePerson')) else 'Guest'
    return if ($name) then $name else $user
};

declare 
    %templates:wrap
function app:userinfo($node as node(), $model as map(*)) as map(*) {
    let $user:= request:get-attribute("org.exist-db.snapsec.user")
    let $name := if ($user) then sm:get-account-metadata($user, xs:anyURI('http://axschema.org/namePerson')) else 'Guest'
    let $group := if ($user) then sm:get-user-groups($user) else 'guest'
    return
        map { "user-id" := $user, "user-name" := $name, "user-groups" := $group}
};


declare function app:list-examples($node as node(), $model as map(*), $group as xs:string) {    
            for $example in doc(concat($config:data-root, "/examples.xml"))//example[group eq $group]
                let $form := $example/document-name/text()
                let $title := $example/title
            return
                <li>
                    <a href="/exist/apps/snapsec/modules/form.xq?form={$form}" target="_blank">{$title/text()}</a>
                </li>    
};

declare function app:write-to-triplestore($node as node(), $model as map(*)){

    let $uid := util:eval(xs:anyURI('/db/apps/snapsec/modules/userInfo.xql'))//uid/text()
    return 
        <li>
        <a href="/exist/apps/snapsec/modules/write-to-triplestore.xq?uid={$uid}" target="_blank">Update Triplestore for: {$uid} </a>  [if this is not your account please login again]
        </li>

  
};
